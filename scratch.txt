<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <!-- <link rel="icon" type="image/svg+xml" href="/vite.svg" /> -->
    <link rel="icon" type="image/png" href="/browser.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Unit Conversion</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>



------ 02/13 ----

App.jsx

import React from 'react';
import { BrowserRouter, Routes, Route, Link } from 'react-router-dom';
import UnitConverter from './UnitConversion';
import CommonUnitSystemsFAQ from './CommonUnitSystemsFAQ';

export default function App() {
  return (
    <BrowserRouter>
      <nav className="flex p-4 bg-gray-100 gap-4">
        <Link className="text-blue-600" to="/">Unit Converter</Link>
        <Link className="text-blue-600" to="/faq">Common Unit Systems FAQ</Link>
      </nav>
      <Routes>
        <Route path="/" element={<UnitConverter />} />
        <Route path="/faq" element={<CommonUnitSystemsFAQ />} />
      </Routes>
    </BrowserRouter>
  );
}


---------
UnitConversion.jsx

import React, { useState } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Select, SelectItem } from '@/components/ui/select';

/****************************************************************************************
 * Existing categories: Length, Temperature, Area, Volume, Weight, Time
 * New subsection: Advanced Converters -> Data Storage, Energy, Power
 *
 * Each category uses factor-based conversion with a chosen "base unit"
 * (Except Temperature, which uses a custom formula).
 ****************************************************************************************/

/* -----------------------------------------------------------------------------
    LENGTH (base = Meter)
   ----------------------------------------------------------------------------- */
const lengthFactors = {
  Kilometer: 1000,
  Centimeter: 0.01,
  Millimeter: 0.001,
  Meter: 1,
  Micrometer: 1e-6,
  Nanometer: 1e-9,
  Mile: 1609.344,
  Yard: 0.9144,
  Foot: 0.3048,
  Inch: 0.0254,
  'Light Year': 9.461e15
};

function convertLength(value, from, to) {
  const fromFactor = lengthFactors[from];
  const toFactor = lengthFactors[to];
  if (!fromFactor || !toFactor) return NaN;
  return (value * fromFactor) / toFactor;
}

/* -----------------------------------------------------------------------------
    TEMPERATURE (custom logic)
   ----------------------------------------------------------------------------- */
function convertTemperature(value, from, to) {
  if (from === to) return value;

  // Convert from -> Celsius
  let celsius;
  if (from === 'Celsius') {
    celsius = value;
  } else if (from === 'Fahrenheit') {
    celsius = (value - 32) * (5 / 9);
  } else {
    // from === 'Kelvin'
    celsius = value - 273.15;
  }

  // Convert Celsius -> to
  if (to === 'Celsius') {
    return celsius;
  } else if (to === 'Fahrenheit') {
    return celsius * (9 / 5) + 32;
  } else {
    // to === 'Kelvin'
    return celsius + 273.15;
  }
}

/* -----------------------------------------------------------------------------
    AREA (base = Square Meter)
   ----------------------------------------------------------------------------- */
const areaFactors = {
  'Square Meter': 1,
  'Square Kilometer': 1e6,
  'Square Centimeter': 1e-4,
  'Square Millimeter': 1e-6,
  'Square Micrometer': 1e-12,
  Hectare: 10000,
  'Square Mile': 2.58999e6,
  'Square Yard': 0.836127,
  'Square Foot': 0.092903,
  'Square Inch': 0.00064516,
  Acre: 4046.8564224
};

function convertArea(value, from, to) {
  const fromFactor = areaFactors[from];
  const toFactor = areaFactors[to];
  if (!fromFactor || !toFactor) return NaN;
  return (value * fromFactor) / toFactor;
}

/* -----------------------------------------------------------------------------
    VOLUME (base = Cubic Meter)
   ----------------------------------------------------------------------------- */
const volumeFactors = {
  'Cubic Meter': 1,
  'Cubic Kilometer': 1e9,
  'Cubic Centimeter': 1e-6,
  'Cubic Millimeter': 1e-9,
  Liter: 0.001,
  Milliliter: 1e-6,
  'US Gallon': 0.003785411784,
  'US Quart': 0.000946352946,
  'US Pint': 0.000473176473,
  'US Cup': 0.0002365882365,
  'US Fluid Ounce': 2.9574e-5,
  'US Table Spoon': 1.47868e-5,
  'US Tea Spoon': 4.92892e-6,
  'Imperial Gallon': 0.00454609,
  'Imperial Quart': 0.0011365225,
  'Imperial Pint': 0.00056826125,
  'Imperial Fluid Ounce': 2.84130625e-5,
  'Imperial Table Spoon': 1.77582e-5,
  'Imperial Tea Spoon': 5.9194e-6,
  'Cubic Mile': 4.16818183e9,
  'Cubic Yard': 0.764554857984,
  'Cubic Foot': 0.028316846592,
  'Cubic Inch': 1.6387064e-5
};

function convertVolume(value, from, to) {
  const fromFactor = volumeFactors[from];
  const toFactor = volumeFactors[to];
  if (!fromFactor || !toFactor) return NaN;
  return (value * fromFactor) / toFactor;
}

/* -----------------------------------------------------------------------------
    WEIGHT (base = Kilogram)
   ----------------------------------------------------------------------------- */
const weightFactors = {
  Kilogram: 1,
  Gram: 0.001,
  Milligram: 1e-6,
  'Metric Ton': 1000,
  'Long Ton': 1016.0469088,
  'Short Ton': 907.18474,
  Pound: 0.45359237,
  Ounce: 0.028349523125,
  Carrat: 0.0002,
  'Atomic Mass Unit': 1.6605390666e-27
};

function convertWeight(value, from, to) {
  const fromFactor = weightFactors[from];
  const toFactor = weightFactors[to];
  if (!fromFactor || !toFactor) return NaN;
  return (value * fromFactor) / toFactor;
}

/* -----------------------------------------------------------------------------
    TIME (base = Second)
   ----------------------------------------------------------------------------- */
const timeFactors = {
  Second: 1,
  Millisecond: 1e-3,
  Microsecond: 1e-6,
  Nanosecond: 1e-9,
  Picosecond: 1e-12,
  Minute: 60,
  Hour: 3600,
  Day: 86400,
  Week: 604800,
  Month: 2629800,       // ~30.4375 days
  Year: 31557600       // ~365.25 days
};

function convertTime(value, from, to) {
  const fromFactor = timeFactors[from];
  const toFactor = timeFactors[to];
  if (!fromFactor || !toFactor) return NaN;
  return (value * fromFactor) / toFactor;
}

/* -----------------------------------------------------------------------------
    ADVANCED CONVERTERS
    1) DATA STORAGE (base = Byte)
   ----------------------------------------------------------------------------- */

// Example references for 1 Byte = 1
// Many approximate values for floppies, DVDs, etc.
const dataStorageFactors = {
  'bit [b]': 1 / 8,
  nibble: 1 / 2,
  'byte [B]': 1,
  character: 1,          // 1 char = 1 byte (ASCII assumption)
  word: 2,               // typical 16-bit word
  'MAPM-word': 16,       // example placeholder
  'quadruple-word': 8,   // double word is 4 bytes, quadruple = 8
  block: 512,            // typical block size
  'kilobit [kb]': 125,   // 1 kb = 1000 bits = 125 bytes
  'kilobyte [kB]': 1024,
  'kilobyte (10^3 bytes)': 1000,
  'megabit [Mb]': 125000,        // 1e6 bits => 125000 bytes
  'megabyte [MB]': 1024 * 1024,  // 1,048,576
  'megabyte (10^6 bytes)': 1e6,
  'gigabit [Gb]': 125000000,     // 1e9 bits => 125e6 bytes
  'gigabyte [GB]': 1024 ** 3,    // 1,073,741,824
  'gigabyte (10^9 bytes)': 1e9,
  'terabit [Tb]': 125000000000,  // 1e12 bits => 125e9 bytes
  'terabyte [TB]': 1024 ** 4,    // 1,099,511,627,776
  'terabyte (10^12 bytes)': 1e12,
  'petabit [Pb]': 125000000000000,  // 1e15 bits => 125e12 bytes
  'petabyte [PB]': 1024 ** 5,       // 1,125,899,906,842,624
  'petabyte (10^15 bytes)': 1e15,
  'exabit [Eb]': 125000000000000000, // 1e18 bits => 125e15 bytes
  'exabyte [EB]': 1024 ** 6,         // 1,152,921,504,606,846,976
  'exabyte (10^18 bytes)': 1e18,

  // Common floppies
  'floppy disk (3.5\", DD)': 737280,        // ~720 KB
  'floppy disk (3.5\", HD)': 1474560,       // ~1.44 MB
  'floppy disk (3.5\", ED)': 2949120,       // ~2.88 MB
  'floppy disk (5.25\", DD)': 368640,       // ~360 KB
  'floppy disk (5.25\", HD)': 1228800,      // ~1.2 MB
  'Zip 100': 100 * 1024 * 1024,             // 104,857,600
  'Zip 250': 250 * 1024 * 1024,             // 262,144,000
  'Jaz 1GB': 1 * 1024 * 1024 * 1024,         // 1,073,741,824
  'Jaz 2GB': 2 * 1024 * 1024 * 1024,         // 2,147,483,648
  'CD (74 minute)': 650 * 1024 * 1024,      // ~681,574,400
  'CD (80 minute)': 700 * 1024 * 1024,      // ~733,007,680

  // DVDs (marketing sizes – approximate)
  'DVD (1 layer, 1 side)': 4.7e9,  // ~4.7 GB
  'DVD (2 layer, 1 side)': 8.5e9,
  'DVD (1 layer, 2 side)': 9.4e9,
  'DVD (2 layer, 2 side)': 1.71e10
};

function convertDataStorage(value, from, to) {
  const fromFactor = dataStorageFactors[from];
  const toFactor = dataStorageFactors[to];
  if (!fromFactor || !toFactor) return NaN;
  return (value * fromFactor) / toFactor;
}

/* -----------------------------------------------------------------------------
    2) ENERGY (base = Joule [J])
   ----------------------------------------------------------------------------- */
const energyFactors = {
  // base: Joule
  'joule [J]': 1,
  'kilojoule [kJ]': 1e3,
  'kilowatt-hour [kW*h]': 3.6e6,   // 1 kWh = 3.6e6 J
  'watt-hour [W*h]': 3600,         // 1 Wh = 3600 J
  'calorie (nutritional)': 4184,   // 1 food Cal
  'horsepower (metric) hour': 735.49875 * 3600, // ~2.648e6 J
  'Btu (IT)': 1055.05585,
  'Btu (th)': 1054.35026444,       // approximate
  'gigajoule [GJ]': 1e9,
  'megajoule [MJ]': 1e6,
  'millijoule [mJ]': 1e-3,
  'microjoule [µJ]': 1e-6,
  'nanojoule [nJ]': 1e-9,
  'attojoule [aJ]': 1e-18,
  'megaelectron-volt [MeV]': 1.602176634e-13, // 1 MeV in Joules
  'kiloelectron-volt [kEv]': 1.602176634e-16, // 1 keV in Joules
  'electron-volt [eV]': 1.602176634e-19,
  erg: 1e-7, // 1 erg = 1e-7 J
  'gigawatt-hour [GW*h]': 3.6e12,
  'megawatt-hour [MW*h]': 3.6e9,
  'kilowatt-second [kW*s]': 1000,    // 1 kWs = 1000 J
  'watt-second [W*s]': 1,           // 1 Ws = 1 J
  'newton meter [N*m]': 1,          // 1 Nm = 1 J
  'horsepower hour [hp*h]': 745.7 * 3600, // ~2.685e6 J (mechanical HP)
  'kilocalorie (IT) [kcal (IT)]': 4184,
  'kilocalorie (th) [kcal (th)]': 4186.8,   // approximate
  'calorie (IT) [cal (IT)]': 4.1868,       // older definitions vary
  'calorie (th) [cal (th)]': 4.184,
  'mega Btu (IT) [MBtu (IT)]': 1.05505585e9,
  'ton-hour (refrigeration)': 12660670,    // ~12.66 MJ (1 ton of cooling for 1 hour)
  'fuel oil equivalent @kiloliter': 4.1868e10, // approximate
  'fuel oil equivalent @barrel (US)': 6.119e9, // approximate
  gigaton: 4.184e18, // 1 gigaton TNT = 4.184e15 kJ => 4.184e18 J
  megaton: 4.184e15, // 1 megaton TNT
  kiloton: 4.184e12,
  'ton (explosives)': 4.184e9, // 1 ton TNT
  'dyne centimeter [dyn*cm]': 1e-7, // same as erg
  'gram-force meter [gf*m]': 0.00980665, // ~ gf = 9.80665 mN
  'gram-force centimeter': 9.80665e-5,
  'kilogram-force centimeter': 0.0980665,
  'kilogram-force meter': 9.80665,
  'kilopond meter [kp*m]': 9.80665,
  'pound-force foot [lbf*ft]': 1.3558179483314,
  'pound-force inch [lbf*in]': 0.112984829027,
  'ounce-force inch [ozf*in]': 0.0070615518142,
  'foot-pound [ft*lbf]': 1.3558179483314,
  'inch-pound [in*lbf]': 0.112984829027,
  'inch-ounce [in*ozf]': 0.0070615518142,
  'poundal foot [pdl*ft]': 0.0421401100938,
  therm: 105505600,       // 1 therm (EC) ~ 105.5 MJ
  'therm (EC)': 105505600, // synonyms
  'therm (US)': 105480400,
  'Hartree energy': 4.3597447222071e-18,
  Rydberg: 2.1798723611035e-18
};

function convertEnergy(value, from, to) {
  const fromFactor = energyFactors[from];
  const toFactor = energyFactors[to];
  if (!fromFactor || !toFactor) return NaN;
  return (value * fromFactor) / toFactor;
}

/* -----------------------------------------------------------------------------
    3) POWER (base = Watt [W])
   ----------------------------------------------------------------------------- */
const powerFactors = {
  'watt [W]': 1,
  'exawatt [EW]': 1e18,
  'petawatt [PW]': 1e15,
  'terawatt [TW]': 1e12,
  'gigawatt [GW]': 1e9,
  'megawatt [MW]': 1e6,
  'kilowatt [kW]': 1e3,
  'hectowatt [hW]': 100,
  'dekawatt [daW]': 10,
  'deciwatt [dW]': 0.1,
  'centiwatt [cW]': 0.01,
  'milliwatt [mW]': 1e-3,
  'microwatt [µW]': 1e-6,
  'nanowatt [nW]': 1e-9,
  'picowatt [pW]': 1e-12,
  'femtowatt [fW]': 1e-15,
  'attowatt [aW]': 1e-18,
  'horsepower [hp, hp (UK)]': 745.7,       // mechanical HP
  'horsepower (550 ft*lbf/s)': 745.7,      // same factor
  'horsepower (metric)': 735.49875,
  'horsepower (boiler)': 9809.5,           // approx
  'horsepower (electric)': 746,
  'horsepower (water)': 746,               // synonyms vary
  'pferdestarke (ps)': 735.49875,
  'Btu (IT)/hour [Btu/h]': 0.29307107,     // 1 Btu/h ~ 0.2931 W
  'Btu (IT)/minute [Btu/min]': 17.584264,  // multiply by 60
  'Btu (IT)/second [Btu/s]': 1054.96,
  'Btu (th)/hour [Btu (th)/h]': 0.292875,  // approx
  'Btu (th)/minute': 17.5725,
  'Btu (th)/second [Btu (th)/s]': 1054.35,
  'MBtu (IT)/hour [MBtu/h]': 293071.07,    // 1 MBtu/h = 1,000 Btu/h, etc.
  MBH: 293.07107,                          // 1 MBH = 1k Btu/h?
  'ton (refrigeration)': 3516.8528421,     // ~ 3.5169 kW
  'kilocalorie (IT)/hour [kcal/h]': 1.163, // 1 kcal/h ~ 1.163 W
  'kilocalorie (IT)/minute': 69.78,
  'kilocalorie (IT)/second': 4186.8,
  'kilocalorie (th)/hour': 1.16222,        // approx
  'kilocalorie (th)/minute': 69.7333,
  'kilocalorie (th)/second': 4184,
  'calorie (IT)/hour [cal/h]': 0.001163,
  'calorie (IT)/minute [cal/min]': 0.06978,
  'calorie (IT)/second [cal/s]': 4.1868,
  'calorie (th)/hour [cal (th)/h]': 0.00116222,
  'calorie (th)/minute': 0.0697333,
  'calorie (th)/second': 4.184,
  'foot pound-force/hour': 0.0003766161,
  'foot pound-force/minute': 0.022596966,
  'foot pound-force/second': 1.355818,
  'pound-foot/hour [lbf*ft/h]': 0.0003766161,
  'pound-foot/minute': 0.022596966,
  'pound-foot/second': 1.355818,
  'erg/second [erg/s]': 1e-7,
  'kilovolt ampere [kV*A]': 1000,  // 1 kVA ~ 1 kW (assuming PF=1)
  'volt ampere [V*A]': 1,         // 1 VA = 1 W
  'newton meter/second': 1,       // 1 N*m/s = 1 W
  'joule/second [J/s]': 1,        // same as watt
  'exajoule/second [EJ/s]': 1e18,
  'petajoule/second [PJ/s]': 1e15,
  'terajoule/second [TJ/s]': 1e12,
  'gigajoule/second [GJ/s]': 1e9,
  'megajoule/second [MJ/s]': 1e6,
  'kilojoule/second [kJ/s]': 1e3,
  'hectojoule/second [hJ/s]': 100,
  'dekajoule/second [daJ/s]': 10,
  'decijoule/second [dJ/s]': 0.1,
  'centijoule/second [cJ/s]': 0.01,
  'millijoule/second [mJ/s]': 1e-3,
  'microjoule/second [µJ/s]': 1e-6,
  'nanojoule/second [nJ/s]': 1e-9,
  'picojoule/second [pJ/s]': 1e-12,
  'femtojoule/second [fJ/s]': 1e-15,
  'attojoule/second [aJ/s]': 1e-18,
  'joule/hour [J/h]': 1 / 3600,
  'joule/minute [J/min]': 1 / 60,
  'kilojoule/hour [kJ/h]': 1e3 / 3600,
  'kilojoule/minute [kJ/min]': 1e3 / 60
};

function convertPower(value, from, to) {
  const fromFactor = powerFactors[from];
  const toFactor = powerFactors[to];
  if (!fromFactor || !toFactor) return NaN;
  return (value * fromFactor) / toFactor;
}

/****************************************************************************************
   Combine all categories into unitGroups
   (We have the original 6 + new advanced ones)
 ****************************************************************************************/
const unitGroups = {
  // Basic categories:
  Length: {
    units: Object.keys(lengthFactors),
    convert: convertLength
  },
  Temperature: {
    units: ['Celsius','Kelvin','Fahrenheit'],
    convert: convertTemperature
  },
  Area: {
    units: Object.keys(areaFactors),
    convert: convertArea
  },
  Volume: {
    units: Object.keys(volumeFactors),
    convert: convertVolume
  },
  Weight: {
    units: Object.keys(weightFactors),
    convert: convertWeight
  },
  Time: {
    units: Object.keys(timeFactors),
    convert: convertTime
  },

  // Advanced Converters:
  'Data Storage': {
    units: Object.keys(dataStorageFactors),
    convert: convertDataStorage
  },
  Energy: {
    units: Object.keys(energyFactors),
    convert: convertEnergy
  },
  Power: {
    units: Object.keys(powerFactors),
    convert: convertPower
  }
};

/****************************************************************************************
   Unit Converter UI
 ****************************************************************************************/
export default function UnitConverter() {
  // Default to the first category in advanced if you like, or stick with a basic one:
  const defaultCategory = 'Length';

  const [category, setCategory] = useState(defaultCategory);
  const [fromUnit, setFromUnit] = useState(unitGroups[defaultCategory].units[0]);
  const [toUnit, setToUnit] = useState(unitGroups[defaultCategory].units[1]);
  const [inputValue, setInputValue] = useState('');
  const [result, setResult] = useState('');

  // Basic vs. Advanced categories
  const basicCategories = ['Length', 'Temperature', 'Area', 'Volume', 'Weight', 'Time'];
  const advancedCategories = ['Data Storage', 'Energy', 'Power'];

  // Handle category changes
  const handleCategoryChange = (val) => {
    setCategory(val);
    setFromUnit(unitGroups[val].units[0]);
    setToUnit(unitGroups[val].units[1] || unitGroups[val].units[0]);
    setInputValue('');
    setResult('');
  };

  // Perform conversion
  const handleConvert = () => {
    const numericValue = parseFloat(inputValue);
    if (isNaN(numericValue)) {
      setResult('Invalid Input');
      return;
    }
    const converter = unitGroups[category].convert;
    if (!converter) {
      setResult('No converter function found.');
      return;
    }
    const convertedVal = converter(numericValue, fromUnit, toUnit);
    if (isNaN(convertedVal)) {
      setResult('Conversion Error');
    } else {
      setResult(`${convertedVal} ${toUnit}`);
    }
  };

  return (
    <Card className="p-6">
      <CardContent>
        <h1 className="text-3xl font-bold mb-4">Unit Converter</h1>

        {/* Category Selector with subsections */}
        <Select onValueChange={handleCategoryChange} value={category}>
          <optgroup label="Basic Converters">
            {basicCategories.map((cat) => (
              <SelectItem key={cat} value={cat}>{cat}</SelectItem>
            ))}
          </optgroup>
          <optgroup label="Advanced Converters">
            {advancedCategories.map((cat) => (
              <SelectItem key={cat} value={cat}>{cat}</SelectItem>
            ))}
          </optgroup>
        </Select>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
          <Input
            type="text"
            placeholder="Enter value"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
          />
          <Select onValueChange={setFromUnit} value={fromUnit}>
            {unitGroups[category].units.map((unit) => (
              <SelectItem key={unit} value={unit}>{unit}</SelectItem>
            ))}
          </Select>
          <Select onValueChange={setToUnit} value={toUnit}>
            {unitGroups[category].units.map((unit) => (
              <SelectItem key={unit} value={unit}>{unit}</SelectItem>
            ))}
          </Select>
        </div>

        <button
          className="mt-4 p-2 bg-blue-500 text-white rounded"
          onClick={handleConvert}
        >
          Convert
        </button>

        {result && (
          <div className="mt-4 text-xl font-semibold">
            Result: {result}
          </div>
        )}
      </CardContent>
    </Card>
  );
}

---------
CommonUnitSystemsFAQ.jsx

import React from 'react';

export default function CommonUnitSystemsFAQ() {
    return (
        <div className="p-8">
            <h1><b>Common Unit Systems</b></h1>


            <p>A unit system, or system of measurement, is a system comprised of interrelated units of measurement. Various unit systems have existed throughout history, and their importance remains evident today, as seen by their widespread use within society.</p>
            <p>In the past, unit systems were defined locally, and often, highly arbitrarily. As such, the length of a unit could vary significantly from region to region. For example, since some units in the past were often based on parts of the body, the unit of the "foot" could have a different definition based on the size of the foot of the king or feudal lord of a given region. Since travel was more limited in the past, local definition and use of units could be seen as being more practical. However, with the advent of globalization, particularly the growth of commerce and science, the arguable need for a universal system of measurement became more apparent.</p>
            <p>Standardized units of measurement facilitate communication between different cultures and countries that may otherwise choose to use local systems, potentially leading to confusion and miscommunication. The International System of Units (SI), the most widely used system of measurement today, was developed in an effort to provide a standardized, more rational system that could be used worldwide. Despite efforts to implement SI globally, there are still a few unit systems in common use, including the United States customary units, and the imperial system of measurement (though most countries that have not officially adopted SI still use SI to a certain extent).</p>
            <p>Although striving for standardization is important, since it is difficult to entirely eliminate the local use of historical unit systems, it is equally important to accept that other systems of measurement exist and be able to use them, or at least relate and convert them to the preferred unit system.</p>
            <p>The three common unit systems that are in use today are the International System of Units, United States customary units, and the imperial system of units.</p>

            <h2><b>International System of Units</b></h2>

            <p>The international System of Units (SI) is the modern form of the metric system and is comprised of seven base units that use twenty metric prefixes to denote decimal multiples or submultiples of the base unit. SI is intended as a coherent, rational system of measurement. It is a system that was stringently conceived and is defined based on invariant constants of nature including the speed of light, the triple point of water, and a physical prototype. In order to maintain reliability and precision, SI requires the precise definition of constants in addition to precise of measurement standards. As such, it is an evolving system that changes when more stable constants are discovered, or other constants can be more precisely measured. SI is the most widely used system of measurement, and the evolution of the system is still ongoing today.</p>
            <p>The SI base units as well as a table of metric prefixes (courtesy of Wikipedia.org) are listed below:</p>
            <p><b>SI base units:</b></p>
            <ul>
                <li>ampere (symbol: A) &ndash; unit of electric current</li>
                <li>kelvin (symbol: K) &ndash; unit of temperature</li>
                <li>second (symbol: s) &ndash; unit of time</li>
                <li>meter (symbol: m) &ndash; unit of length</li>
                <li>kilogram (symbol: kg) &ndash; unit of mass</li>
                <li>candela (symbol: cd) &ndash; unit of luminous intensity</li>
                <li>mole (symbol: mol) &ndash; unit reflecting amount of a substance</li>
            </ul>

            <p><b>Metric prefixes:</b></p>
            <table align="center">
                <tr><td colspan="4" bgcolor="##a393eb"><font color="white"><b>Metric prefixes in everyday use</b></font></td></tr>
                <tr align="center"><td bgcolor="#ccc"><b>Text</b></td><td bgcolor="#ccc"><b>Symbol</b></td><td bgcolor="#ccc"><b>Factor</b></td><td bgcolor="#ccc"><b>Power</b></td></tr>
                <tr><td>exa</td><td>E</td><td align="right">1000000000000000000</td><td align="right">10<sup>18</sup></td></tr>
                <tr><td>peta</td><td>P</td><td align="right">1000000000000000</td><td align="right">10<sup>15</sup></td></tr>
                <tr><td>tera</td><td>T</td><td align="right">1000000000000</td><td align="right">10<sup>12</sup></td></tr>
                <tr><td>giga</td><td>G</td><td align="right">1000000000</td><td align="right">10<sup>9</sup></td></tr>
                <tr><td>mega</td><td>M</td><td align="right">1000000</td><td align="right">10<sup>6</sup></td></tr>
                <tr><td>kilo</td><td>k</td><td align="right">1000</td><td align="right">10<sup>3</sup></td></tr>
                <tr><td>hecto</td><td>h</td><td align="right">100</td><td align="right">10<sup>2</sup></td></tr>
                <tr><td>deca</td><td>da</td><td align="right">10</td><td align="right">10<sup>1</sup></td></tr>
                <tr><td>(none)</td><td>(none)</td><td align="right">1</td><td align="right">10<sup>0</sup></td></tr>
                <tr><td>deci</td><td>d</td><td align="right">0.1</td><td align="right">10<sup>-1</sup></td></tr>
                <tr><td>centi</td><td>c</td><td align="right">0.01</td><td align="right">10<sup>-2</sup></td></tr>
                <tr><td>milli</td><td>m</td><td align="right">0.001</td><td align="right">10<sup>-3</sup></td></tr>
                <tr><td>micro</td><td> &mu;</td><td align="right">0.000001</td><td align="right">10<sup>-6</sup></td></tr>
                <tr><td>nano</td><td>n</td><td align="right">0.000000001</td><td align="right">10<sup>-9</sup></td></tr>
                <tr><td>pico</td><td>p</td><td align="right">0.000000000001</td><td align="right">10<sup>-12</sup></td></tr>
                <tr><td>femto</td><td>f</td><td align="right">0.000000000000001</td><td align="right">10<sup>-15</sup></td></tr>
                <tr><td>atto</td><td>a</td><td align="right">0.000000000000000001</td><td align="right">10<sup>-18</sup></td></tr>
            </table>

            <p><b>SI-derived units:</b></p>
            <p>In addition, SI also includes 22 units of measurement that are derived from the 7 SI base units. These units are either dimensionless or are expressed as a product of one or more of the SI base units. Some of the more common examples of these include:</p>
            <ul>
                <li>radian (symbol: rad) &ndash; unit of angle</li>
                <li>newton (symbol: N) &ndash; unit of force or weight</li>
                <li>watt (symbol: W) &ndash; unit of power</li>
                <li>volt (symbol: V) &ndash; unit of voltage, electrical potential difference, and electromotive force</li>
                <li>degree Celsius (symbol: &deg;C) &ndash; unit of temperature</li>
            </ul>

            <p><b>Non-SI units accepted for use with SI:</b></p>
            <p>There are also numerous units that are accepted for use with SI that are not considered SI units or SI derived units. Some of the more common examples include:</p>
            <ul>
                <li>minute, hour, day (symbol: min, h, d respectively) &ndash; units of time</li>
                <li>degree &ndash; (symbol: &deg;C) &ndash; unit of temperature</li>
                <li>liter &ndash; (symbol: L) &ndash; unit of volume</li>
                <li>bar &ndash; (symbol: bar) &ndash; unit of pressure</li>
                <li>millimeter of mercury (symbol: mmHg) &ndash; unit of pressure</li>
            </ul>

            <h3>History of SI:</h3>
            <p>The International System of Units (SI) is the most widely used unit system in the world. It is the modern version of the metric system which was developed over time while borrowing units or ideas from other systems, in large part by a committee of the French Academy of Sciences, beginning in 1791.</p>
            <p>The process of metrication, including the eventual definition and adoption of the International System of Units was a slow process. France officially introduced the metric system in 1799, and the system spread throughout Europe during the 19th century. By the 1970s, metrication in the form of SI was complete in almost all countries around the world. Notable exceptions to this include the United Kingdom, the United States, Liberia, and Myanmar. Excluding the United Kingdom, these countries are the only countries that have not officially adopted SI.</p>

            <p><b>The United States:</b></p>
            <ul>
                <li><b>1866</b> &ndash;  the metric system was legalized as a system of measurement, though not widely used.</li>
                <li><b>1975</b> &ndash; the metric system was officially adopted for government and military use as well as for trade and commerce.</li>
                <li><b>1992</b> &ndash; an amendment to the Fair Packaging and Labeling Act required that food labels on federally regulated consumer commodities include both metric and US customary units. This was amended again in 2010 to allow manufacturers to voluntarily use only metric units for labeling.</li>
                <li><b>2012</b> &ndash; a petition was created to "Make the Metric system the standard in the United States, instead of the Imperial system." The white house responded by stating that United States customary units were defined within the metric system, and that the choice to use the metric system should be made by individuals, implying that there is no federal intent to mandate the nationwide use of the metric system.</li>
            </ul>

            <p><b>The United Kingdom:</b></p>
            <ul>
                <li><b>1862</b> &ndash; preparations for conversion to the metric system began, and metric units could be legally used in the UK for nearly a century before efforts to fully convert to the metric system actually began.</li>
                <li><b>1965</b> &ndash; the government set a 10-year plan for full metrication.</li>
                <li><b>1969</b> &ndash; the Metrication Board was created to promote and coordinate country-wide metrication. No plans were made to mandate the use of the metric system, and the Metrication Board was abolished in 1980 after a change in government.</li>
                <li><b>1989</b> &ndash; the UK again chose not to make the use of the metric system compulsory by avoiding the European Units of Measurement Directive.</li>
                <li>Following the UKs exit from the European Union, there has been a movement from retailers to shift back to the use of imperial units.</li>
            </ul>
            <p>Although there are other countries in which units other than SI are primarily used, the US and the UK are the largest contributors to two of the other unit systems commonly used today. As such, the other countries, many of which use unit systems influenced by either the UK or the US, will not be discussed here.</p>

            <h2>United States customary units</h2>
            <p>United States customary units (UCS) are a system of measurements used in the United States (US). UCS originated from English units (not to be confused with imperial units) which were used by the British Empire starting as early as 1495 and continued to be used in the UK up until replacement by the imperial system in 1824. While UCS is primarily used for commercial, social, and personal applications, the US uses the International System of Units (SI) in many other areas including science, medicine, industry, the government, and the military.</p>

            <p><b>History:</b></p>
            <ul>
                <li><b>1824</b> &ndash; creation of the imperial system, marking the split of the unit systems used in the UK and the US. Although both systems are based on English units and have many similarities, this development also resulted in significant differences between the two systems.</li>
                <li><b>1893</b> &ndash; the Mendenhall Order officially redefined most US customary units in terms of meters and kilograms.</li>
                <li><b>1959</b> &ndash; the international yard and pound agreement of 1959 further refined the definitions of UCS in terms of metric units.</li>
                <li><b>1975</b> &ndash; the Metric Conversion Act of 1975 was passed, making the metric system "the preferred system of weights and measures for U.S. trade and commerce."</li>
            </ul>

            <p><b>Units of length:</b></p>
            <p>The four US customary units that are in everyday use are listed below, along with their SI equivalents based on the definition of 1 yard as 0.9144 meters:</p>
            <ul>
                <li>inch (symbol: in) &ndash; 0.0254 meters</li>
                <li>foot &ndash; 0.3048 meters</li>
                <li>yard &ndash; 0.9144 meters</li>
                <li>mile &ndash; 1609.344 meters</li>
            </ul>

            <p><b>Units of area:</b></p>
            <p>Square feet, square inches, square yards, etc., are units of area commonly used in UCS, but the only area measurement in the system that is not related to one of its lengths is the acre, which is equal to 4,046.873 m<sup>2</sup>.</p>

            <p><b>Units of volume:</b></p>
            <p>UCS uses many different measurements of volume. It uses some general units of volume, as well as volume measurements specifically for dry or liquid volumes. Below are some, but not all of these volumes, and their SI equivalents.</p>
            <p><i>General approximate units of volume:</i></p>
            <ul>
                <li>cubic inch (in<sup>3</sup>) &ndash; 0.0000164 meters<sup>3</sup></li>
                <li>cubic foot (ft<sup>3</sup>) &ndash; 0.0283 meters<sup>3</sup></li>
                <li>cubic yard (yd<sup>3</sup>) &ndash; 0.765 meters<sup>3</sup></li>
            </ul>
            <p><i>Approximate liquid volumes:</i></p>
            <p>These volumes have similar names as their counterparts in the imperial system, but the actual measurements differ slightly. Also, for most of these measurements, the US simply adds the term "dry" before the unit to distinguish a unit from its liquid definition. This distinction does not exist in the imperial system, which does not have separate dry or liquid volumes.</p>
            <ul>
                <li>teaspoon (symbol: tsp) &ndash; 4.929 milliliters</li>
                <li>tablespoon (symbol: tbsp) &ndash; 14.787 milliliters</li>
                <li>fluid ounce (symbol: fl oz) &ndash; 29.574 milliliters</li>
                <li>cup (symbol: cp) &ndash; 236.588 milliliters</li>
                <li>pint (symbol: pt) &ndash; 473.176 milliliters</li>
                <li>quart (symbol: qt) &ndash; 946.353 milliliters</li>
                <li>gallon (symbol: gal) &ndash; 3785.41 milliliters</li>
            </ul>
            <p><i>Approximate dry volumes:</i></p>
            <ul>
                <li>dry pint (symbol: pt) &ndash; 550.610 milliliters</li>
                <li>dry quart (symbol: qt) &ndash; 1,101.221 milliliters</li>
                <li>dry gallon (symbol: gal) &ndash; 4,404.884 milliliters</li>
            </ul>

            <p><b>Units of weight and mass:</b></p>
            <p>The most commonly used system of mass in the United States is avoirdupois weight. Troy weight is sometimes used, but not widely. UCS is based on the avoirdupois pound, which was defined in 1959 as exactly 453.59237 grams. The pound is sometimes used as a force, using the term "pound-force." This should not be confused as a unit of mass. Below are listed some of the USC units of mass, along with their approximate SI equivalents:</p>
            <ul>
                <li>ounce (symbol: oz) &ndash; 28.350 grams</li>
                <li>pound (symbol: lb) &ndash; 453.592 grams</li>
                <li>ton (symbol: ton) &ndash; 907.185 kilograms</li>
                <li>long ton (symbol: long ton) &ndash; 1,016.047 kilograms</li>
            </ul>

            <p><b>Units of temperature:</b></p>
            <p>UCS uses the unit degrees Fahrenheit to measure temperatures for everyday purposes. Like most of the rest of the world however, UCS uses degrees Celsius and kelvins within scientific contexts.</p>

            <h2>Imperial system</h2>
            <p>The imperial system of measurements, also known as British Imperial, was defined in 1824, replacing the previous English units known as the Winchester Standards, which were in effect from 1588 to 1825. Although the United Kingdom has technically adopted the International System of Units (SI), in practice, the UK is much like the United States in that it uses SI in many areas such as industry, healthcare, government, science, and others, but still commonly uses a system derived from English units (the imperial system) in everyday life. The imperial system is also still in use in Canada as well as some other countries previous under the control of the British Empire.</p>
            <ul>
                <li><b>1818</b> &ndash; discussion of adoption of the metric system occurred in Parliament.</li>
                <li><b>1824</b> &ndash; creation of the imperial system as part of the Weights and Measures Act of 1824. This act allowed the use of English units as long as imperial equivalents were marked.</li>
                <li><b>1960</b> &ndash; certain industries and government agencies underwent, or were in the process of undergoing metrication by this point in time.</li>
                <li><b>1965</b> &ndash; the UK officially agreed to a policy to support metrication. Specifically, the policy was intended to support voluntary metrication with some government subsidization.</li>
                <li><b>1969</b> &ndash; the Metrication Board was founded to promote and coordinate metrication.</li>
                <li><b>1978</b> &ndash; the government began mandating metrication in certain sectors in response to carpet retailers reverting to imperial measurements of area for pricing.</li>
                <li><b>1989</b> &ndash; government policy shifted again back to preference for voluntary metrication.</li>
                <li><b>1995</b> &ndash; UK completes its official partial transition to the metric system. This does not apply to draught beer, road signs, and speedometers, all of which still either use imperial units exclusively, or include metric measurements alongside the imperial units.</li>
            </ul>
            <p>Below are some of the various units of the imperial system, and their approximate metric equivalents. Many of these are similar to units in the US customary system.</p>

            <p><b>Units of length:</b></p>
            <ul>
                <li>inch (symbol: in) &ndash; 0.0254 meters</li>
                <li>foot (symbol: ft) &ndash; 0.3048 meters</li>
                <li>yard (symbol: yd) &ndash; 0.9144 meters</li>
                <li>chain (symbol: ch) &ndash; 20.1168 meters</li>
                <li>furlong (symbol: fur) &ndash; 201.168 meters</li>
                <li>mile (symbol: mi) &ndash; 1,609.344 meters</li>
                <li>league (symbol: lea) &ndash; 4,828.032 meters (3 miles)</li>
            </ul>

            <p><b>Units of area:</b></p>
            <ul>
                <li>perch &ndash; 25.293 square meters</li>
                <li>rood &ndash; 1011.714 square meters</li>
                <li>acre &ndash; 4046.856 square meters</li>
            </ul>

            <p><b>Units of volume:</b></p>
            <p>While these units have the same names in US customary units, their values are different, and the imperial system does not have separate dry or liquid volumes.</p>
            <ul>
                <li>fluid ounce (symbol: fl oz) &ndash; 28.413 milliliters</li>
                <li>gill (symbol: gi) &ndash; 142.065 milliliters</li>
                <li>pint (symbol: pt) &ndash; 568.261 milliliters</li>
                <li>quart (symbol: qt) &ndash; 1,136.523 milliliters</li>
                <li>gallon (symbol: gal) &ndash; 4,546.09 milliliters</li>
            </ul>

            <p><b>Units of weight and mass:</b></p>
            <p>These units are similar to their UCS counterparts with the exception of the ton. The imperial ton (2,240 pounds), commonly referred to as the long ton in the US, is much closer to the metric ton (2,204.6 pounds) and is larger than the US short ton (2,000 pounds).</p>
            <p>While the stone is related to the ounce and the pound, and would have the same measurement in USC, the stone is not used in the United States, and is mainly widely used as a measurement of body weight in the UK.</p>
            <ul>
                <li>ounce (symbol: oz) &ndash; 28.350 grams</li>
                <li>pound (symbol: lb) &ndash; 453.592 grams</li>
                <li>stone (symbol: st) &ndash; 6.350 kilograms</li>
                <li>ton (symbol: t) &ndash; 1,016.047 kilograms</li>
            </ul>
        </div>
    );
}

_________________

-----------------


import React, { useState } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Select, SelectItem } from '@/components/ui/select';

/****************************************************************************************
 * Existing categories: Length, Temperature, Area, Volume, Weight, Time
 * New subsection: Advanced Converters -> Data Storage, Energy, Power
 *
 * Each category uses factor-based conversion with a chosen "base unit"
 * (Except Temperature, which uses a custom formula).
 ****************************************************************************************/

/* -----------------------------------------------------------------------------
    LENGTH (base = Meter)
   ----------------------------------------------------------------------------- */
const lengthFactors = {
  Kilometer: 1000,
  Centimeter: 0.01,
  Millimeter: 0.001,
  Meter: 1,
  Micrometer: 1e-6,
  Nanometer: 1e-9,
  Mile: 1609.344,
  Yard: 0.9144,
  Foot: 0.3048,
  Inch: 0.0254,
  'Light Year': 9.461e15
};

function convertLength(value, from, to) {
  const fromFactor = lengthFactors[from];
  const toFactor = lengthFactors[to];
  if (!fromFactor || !toFactor) return NaN;
  return (value * fromFactor) / toFactor;
}

/* -----------------------------------------------------------------------------
    TEMPERATURE (custom logic)
   ----------------------------------------------------------------------------- */
function convertTemperature(value, from, to) {
  if (from === to) return value;

  // Convert from -> Celsius
  let celsius;
  if (from === 'Celsius') {
    celsius = value;
  } else if (from === 'Fahrenheit') {
    celsius = (value - 32) * (5 / 9);
  } else {
    // from === 'Kelvin'
    celsius = value - 273.15;
  }

  // Convert Celsius -> to
  if (to === 'Celsius') {
    return celsius;
  } else if (to === 'Fahrenheit') {
    return celsius * (9 / 5) + 32;
  } else {
    // to === 'Kelvin'
    return celsius + 273.15;
  }
}

/* -----------------------------------------------------------------------------
    AREA (base = Square Meter)
   ----------------------------------------------------------------------------- */
const areaFactors = {
  'Square Meter': 1,
  'Square Kilometer': 1e6,
  'Square Centimeter': 1e-4,
  'Square Millimeter': 1e-6,
  'Square Micrometer': 1e-12,
  Hectare: 10000,
  'Square Mile': 2.58999e6,
  'Square Yard': 0.836127,
  'Square Foot': 0.092903,
  'Square Inch': 0.00064516,
  Acre: 4046.8564224
};

function convertArea(value, from, to) {
  const fromFactor = areaFactors[from];
  const toFactor = areaFactors[to];
  if (!fromFactor || !toFactor) return NaN;
  return (value * fromFactor) / toFactor;
}

/* -----------------------------------------------------------------------------
    VOLUME (base = Cubic Meter)
   ----------------------------------------------------------------------------- */
const volumeFactors = {
  'Cubic Meter': 1,
  'Cubic Kilometer': 1e9,
  'Cubic Centimeter': 1e-6,
  'Cubic Millimeter': 1e-9,
  Liter: 0.001,
  Milliliter: 1e-6,
  'US Gallon': 0.003785411784,
  'US Quart': 0.000946352946,
  'US Pint': 0.000473176473,
  'US Cup': 0.0002365882365,
  'US Fluid Ounce': 2.9574e-5,
  'US Table Spoon': 1.47868e-5,
  'US Tea Spoon': 4.92892e-6,
  'Imperial Gallon': 0.00454609,
  'Imperial Quart': 0.0011365225,
  'Imperial Pint': 0.00056826125,
  'Imperial Fluid Ounce': 2.84130625e-5,
  'Imperial Table Spoon': 1.77582e-5,
  'Imperial Tea Spoon': 5.9194e-6,
  'Cubic Mile': 4.16818183e9,
  'Cubic Yard': 0.764554857984,
  'Cubic Foot': 0.028316846592,
  'Cubic Inch': 1.6387064e-5
};

function convertVolume(value, from, to) {
  const fromFactor = volumeFactors[from];
  const toFactor = volumeFactors[to];
  if (!fromFactor || !toFactor) return NaN;
  return (value * fromFactor) / toFactor;
}

/* -----------------------------------------------------------------------------
    WEIGHT (base = Kilogram)
   ----------------------------------------------------------------------------- */
const weightFactors = {
  Kilogram: 1,
  Gram: 0.001,
  Milligram: 1e-6,
  'Metric Ton': 1000,
  'Long Ton': 1016.0469088,
  'Short Ton': 907.18474,
  Pound: 0.45359237,
  Ounce: 0.028349523125,
  Carrat: 0.0002,
  'Atomic Mass Unit': 1.6605390666e-27
};

function convertWeight(value, from, to) {
  const fromFactor = weightFactors[from];
  const toFactor = weightFactors[to];
  if (!fromFactor || !toFactor) return NaN;
  return (value * fromFactor) / toFactor;
}

/* -----------------------------------------------------------------------------
    TIME (base = Second)
   ----------------------------------------------------------------------------- */
const timeFactors = {
  Second: 1,
  Millisecond: 1e-3,
  Microsecond: 1e-6,
  Nanosecond: 1e-9,
  Picosecond: 1e-12,
  Minute: 60,
  Hour: 3600,
  Day: 86400,
  Week: 604800,
  Month: 2629800,       // ~30.4375 days
  Year: 31557600       // ~365.25 days
};

function convertTime(value, from, to) {
  const fromFactor = timeFactors[from];
  const toFactor = timeFactors[to];
  if (!fromFactor || !toFactor) return NaN;
  return (value * fromFactor) / toFactor;
}

/* -----------------------------------------------------------------------------
    ADVANCED CONVERTERS
    1) DATA STORAGE (base = Byte)
   ----------------------------------------------------------------------------- */

// Example references for 1 Byte = 1
// Many approximate values for floppies, DVDs, etc.
const dataStorageFactors = {
  'bit [b]': 1 / 8,
  nibble: 1 / 2,
  'byte [B]': 1,
  character: 1,          // 1 char = 1 byte (ASCII assumption)
  word: 2,               // typical 16-bit word
  'MAPM-word': 16,       // example placeholder
  'quadruple-word': 8,   // double word is 4 bytes, quadruple = 8
  block: 512,            // typical block size
  'kilobit [kb]': 125,   // 1 kb = 1000 bits = 125 bytes
  'kilobyte [kB]': 1024,
  'kilobyte (10^3 bytes)': 1000,
  'megabit [Mb]': 125000,        // 1e6 bits => 125000 bytes
  'megabyte [MB]': 1024 * 1024,  // 1,048,576
  'megabyte (10^6 bytes)': 1e6,
  'gigabit [Gb]': 125000000,     // 1e9 bits => 125e6 bytes
  'gigabyte [GB]': 1024 ** 3,    // 1,073,741,824
  'gigabyte (10^9 bytes)': 1e9,
  'terabit [Tb]': 125000000000,  // 1e12 bits => 125e9 bytes
  'terabyte [TB]': 1024 ** 4,    // 1,099,511,627,776
  'terabyte (10^12 bytes)': 1e12,
  'petabit [Pb]': 125000000000000,  // 1e15 bits => 125e12 bytes
  'petabyte [PB]': 1024 ** 5,       // 1,125,899,906,842,624
  'petabyte (10^15 bytes)': 1e15,
  'exabit [Eb]': 125000000000000000, // 1e18 bits => 125e15 bytes
  'exabyte [EB]': 1024 ** 6,         // 1,152,921,504,606,846,976
  'exabyte (10^18 bytes)': 1e18,

  // Common floppies
  'floppy disk (3.5\", DD)': 737280,        // ~720 KB
  'floppy disk (3.5\", HD)': 1474560,       // ~1.44 MB
  'floppy disk (3.5\", ED)': 2949120,       // ~2.88 MB
  'floppy disk (5.25\", DD)': 368640,       // ~360 KB
  'floppy disk (5.25\", HD)': 1228800,      // ~1.2 MB
  'Zip 100': 100 * 1024 * 1024,             // 104,857,600
  'Zip 250': 250 * 1024 * 1024,             // 262,144,000
  'Jaz 1GB': 1 * 1024 * 1024 * 1024,         // 1,073,741,824
  'Jaz 2GB': 2 * 1024 * 1024 * 1024,         // 2,147,483,648
  'CD (74 minute)': 650 * 1024 * 1024,      // ~681,574,400
  'CD (80 minute)': 700 * 1024 * 1024,      // ~733,007,680

  // DVDs (marketing sizes – approximate)
  'DVD (1 layer, 1 side)': 4.7e9,  // ~4.7 GB
  'DVD (2 layer, 1 side)': 8.5e9,
  'DVD (1 layer, 2 side)': 9.4e9,
  'DVD (2 layer, 2 side)': 1.71e10
};

function convertDataStorage(value, from, to) {
  const fromFactor = dataStorageFactors[from];
  const toFactor = dataStorageFactors[to];
  if (!fromFactor || !toFactor) return NaN;
  return (value * fromFactor) / toFactor;
}

/* -----------------------------------------------------------------------------
    2) ENERGY (base = Joule [J])
   ----------------------------------------------------------------------------- */
const energyFactors = {
  // base: Joule
  'joule [J]': 1,
  'kilojoule [kJ]': 1e3,
  'kilowatt-hour [kW*h]': 3.6e6,   // 1 kWh = 3.6e6 J
  'watt-hour [W*h]': 3600,         // 1 Wh = 3600 J
  'calorie (nutritional)': 4184,   // 1 food Cal
  'horsepower (metric) hour': 735.49875 * 3600, // ~2.648e6 J
  'Btu (IT)': 1055.05585,
  'Btu (th)': 1054.35026444,       // approximate
  'gigajoule [GJ]': 1e9,
  'megajoule [MJ]': 1e6,
  'millijoule [mJ]': 1e-3,
  'microjoule [µJ]': 1e-6,
  'nanojoule [nJ]': 1e-9,
  'attojoule [aJ]': 1e-18,
  'megaelectron-volt [MeV]': 1.602176634e-13, // 1 MeV in Joules
  'kiloelectron-volt [kEv]': 1.602176634e-16, // 1 keV in Joules
  'electron-volt [eV]': 1.602176634e-19,
  erg: 1e-7, // 1 erg = 1e-7 J
  'gigawatt-hour [GW*h]': 3.6e12,
  'megawatt-hour [MW*h]': 3.6e9,
  'kilowatt-second [kW*s]': 1000,    // 1 kWs = 1000 J
  'watt-second [W*s]': 1,           // 1 Ws = 1 J
  'newton meter [N*m]': 1,          // 1 Nm = 1 J
  'horsepower hour [hp*h]': 745.7 * 3600, // ~2.685e6 J (mechanical HP)
  'kilocalorie (IT) [kcal (IT)]': 4184,
  'kilocalorie (th) [kcal (th)]': 4186.8,   // approximate
  'calorie (IT) [cal (IT)]': 4.1868,       // older definitions vary
  'calorie (th) [cal (th)]': 4.184,
  'mega Btu (IT) [MBtu (IT)]': 1.05505585e9,
  'ton-hour (refrigeration)': 12660670,    // ~12.66 MJ (1 ton of cooling for 1 hour)
  'fuel oil equivalent @kiloliter': 4.1868e10, // approximate
  'fuel oil equivalent @barrel (US)': 6.119e9, // approximate
  gigaton: 4.184e18, // 1 gigaton TNT = 4.184e15 kJ => 4.184e18 J
  megaton: 4.184e15, // 1 megaton TNT
  kiloton: 4.184e12,
  'ton (explosives)': 4.184e9, // 1 ton TNT
  'dyne centimeter [dyn*cm]': 1e-7, // same as erg
  'gram-force meter [gf*m]': 0.00980665, // ~ gf = 9.80665 mN
  'gram-force centimeter': 9.80665e-5,
  'kilogram-force centimeter': 0.0980665,
  'kilogram-force meter': 9.80665,
  'kilopond meter [kp*m]': 9.80665,
  'pound-force foot [lbf*ft]': 1.3558179483314,
  'pound-force inch [lbf*in]': 0.112984829027,
  'ounce-force inch [ozf*in]': 0.0070615518142,
  'foot-pound [ft*lbf]': 1.3558179483314,
  'inch-pound [in*lbf]': 0.112984829027,
  'inch-ounce [in*ozf]': 0.0070615518142,
  'poundal foot [pdl*ft]': 0.0421401100938,
  therm: 105505600,       // 1 therm (EC) ~ 105.5 MJ
  'therm (EC)': 105505600, // synonyms
  'therm (US)': 105480400,
  'Hartree energy': 4.3597447222071e-18,
  Rydberg: 2.1798723611035e-18
};

function convertEnergy(value, from, to) {
  const fromFactor = energyFactors[from];
  const toFactor = energyFactors[to];
  if (!fromFactor || !toFactor) return NaN;
  return (value * fromFactor) / toFactor;
}

/* -----------------------------------------------------------------------------
    3) POWER (base = Watt [W])
   ----------------------------------------------------------------------------- */
const powerFactors = {
  'watt [W]': 1,
  'exawatt [EW]': 1e18,
  'petawatt [PW]': 1e15,
  'terawatt [TW]': 1e12,
  'gigawatt [GW]': 1e9,
  'megawatt [MW]': 1e6,
  'kilowatt [kW]': 1e3,
  'hectowatt [hW]': 100,
  'dekawatt [daW]': 10,
  'deciwatt [dW]': 0.1,
  'centiwatt [cW]': 0.01,
  'milliwatt [mW]': 1e-3,
  'microwatt [µW]': 1e-6,
  'nanowatt [nW]': 1e-9,
  'picowatt [pW]': 1e-12,
  'femtowatt [fW]': 1e-15,
  'attowatt [aW]': 1e-18,
  'horsepower [hp, hp (UK)]': 745.7,       // mechanical HP
  'horsepower (550 ft*lbf/s)': 745.7,      // same factor
  'horsepower (metric)': 735.49875,
  'horsepower (boiler)': 9809.5,           // approx
  'horsepower (electric)': 746,
  'horsepower (water)': 746,               // synonyms vary
  'pferdestarke (ps)': 735.49875,
  'Btu (IT)/hour [Btu/h]': 0.29307107,     // 1 Btu/h ~ 0.2931 W
  'Btu (IT)/minute [Btu/min]': 17.584264,  // multiply by 60
  'Btu (IT)/second [Btu/s]': 1054.96,
  'Btu (th)/hour [Btu (th)/h]': 0.292875,  // approx
  'Btu (th)/minute': 17.5725,
  'Btu (th)/second [Btu (th)/s]': 1054.35,
  'MBtu (IT)/hour [MBtu/h]': 293071.07,    // 1 MBtu/h = 1,000 Btu/h, etc.
  MBH: 293.07107,                          // 1 MBH = 1k Btu/h?
  'ton (refrigeration)': 3516.8528421,     // ~ 3.5169 kW
  'kilocalorie (IT)/hour [kcal/h]': 1.163, // 1 kcal/h ~ 1.163 W
  'kilocalorie (IT)/minute': 69.78,
  'kilocalorie (IT)/second': 4186.8,
  'kilocalorie (th)/hour': 1.16222,        // approx
  'kilocalorie (th)/minute': 69.7333,
  'kilocalorie (th)/second': 4184,
  'calorie (IT)/hour [cal/h]': 0.001163,
  'calorie (IT)/minute [cal/min]': 0.06978,
  'calorie (IT)/second [cal/s]': 4.1868,
  'calorie (th)/hour [cal (th)/h]': 0.00116222,
  'calorie (th)/minute': 0.0697333,
  'calorie (th)/second': 4.184,
  'foot pound-force/hour': 0.0003766161,
  'foot pound-force/minute': 0.022596966,
  'foot pound-force/second': 1.355818,
  'pound-foot/hour [lbf*ft/h]': 0.0003766161,
  'pound-foot/minute': 0.022596966,
  'pound-foot/second': 1.355818,
  'erg/second [erg/s]': 1e-7,
  'kilovolt ampere [kV*A]': 1000,  // 1 kVA ~ 1 kW (assuming PF=1)
  'volt ampere [V*A]': 1,         // 1 VA = 1 W
  'newton meter/second': 1,       // 1 N*m/s = 1 W
  'joule/second [J/s]': 1,        // same as watt
  'exajoule/second [EJ/s]': 1e18,
  'petajoule/second [PJ/s]': 1e15,
  'terajoule/second [TJ/s]': 1e12,
  'gigajoule/second [GJ/s]': 1e9,
  'megajoule/second [MJ/s]': 1e6,
  'kilojoule/second [kJ/s]': 1e3,
  'hectojoule/second [hJ/s]': 100,
  'dekajoule/second [daJ/s]': 10,
  'decijoule/second [dJ/s]': 0.1,
  'centijoule/second [cJ/s]': 0.01,
  'millijoule/second [mJ/s]': 1e-3,
  'microjoule/second [µJ/s]': 1e-6,
  'nanojoule/second [nJ/s]': 1e-9,
  'picojoule/second [pJ/s]': 1e-12,
  'femtojoule/second [fJ/s]': 1e-15,
  'attojoule/second [aJ/s]': 1e-18,
  'joule/hour [J/h]': 1 / 3600,
  'joule/minute [J/min]': 1 / 60,
  'kilojoule/hour [kJ/h]': 1e3 / 3600,
  'kilojoule/minute [kJ/min]': 1e3 / 60
};

function convertPower(value, from, to) {
  const fromFactor = powerFactors[from];
  const toFactor = powerFactors[to];
  if (!fromFactor || !toFactor) return NaN;
  return (value * fromFactor) / toFactor;
}

/****************************************************************************************
   Combine all categories into unitGroups
   (We have the original 6 + new advanced ones)
 ****************************************************************************************/
const unitGroups = {
  // Basic categories:
  Length: {
    units: Object.keys(lengthFactors),
    convert: convertLength
  },
  Temperature: {
    units: ['Celsius','Kelvin','Fahrenheit'],
    convert: convertTemperature
  },
  Area: {
    units: Object.keys(areaFactors),
    convert: convertArea
  },
  Volume: {
    units: Object.keys(volumeFactors),
    convert: convertVolume
  },
  Weight: {
    units: Object.keys(weightFactors),
    convert: convertWeight
  },
  Time: {
    units: Object.keys(timeFactors),
    convert: convertTime
  },

  // Advanced Converters:
  'Data Storage': {
    units: Object.keys(dataStorageFactors),
    convert: convertDataStorage
  },
  Energy: {
    units: Object.keys(energyFactors),
    convert: convertEnergy
  },
  Power: {
    units: Object.keys(powerFactors),
    convert: convertPower
  }
};

/****************************************************************************************
   Unit Converter UI
 ****************************************************************************************/
   export default function UnitConverter() {
    const defaultCategory = 'Length';
    const [category, setCategory] = useState(defaultCategory);
    const [fromUnit, setFromUnit] = useState(unitGroups[defaultCategory].units[0]);
    const [toUnit, setToUnit] = useState(unitGroups[defaultCategory].units[1]);
    const [inputValue, setInputValue] = useState('');
    const [result, setResult] = useState('');
  
    const basicCategories = ['Length', 'Temperature', 'Area', 'Volume', 'Weight', 'Time'];
    const advancedCategories = ['Data Storage', 'Energy', 'Power'];
  
    const handleCategoryChange = (val) => {
      setCategory(val);
      setFromUnit(unitGroups[val].units[0]);
      setToUnit(unitGroups[val].units[1] || unitGroups[val].units[0]);
      setInputValue('');
      setResult('');
    };
  
    const handleConvert = () => {
      const numericValue = parseFloat(inputValue);
      if (isNaN(numericValue)) {
        setResult('Invalid Input');
        return;
      }
      const converter = unitGroups[category].convert;
      if (!converter) {
        setResult('No converter function found.');
        return;
      }
      const convertedVal = converter(numericValue, fromUnit, toUnit);
      if (isNaN(convertedVal)) {
        setResult('Conversion Error');
      } else {
        setResult(`${convertedVal} ${toUnit}`);
      }
    };
  
    return (
      <Card className="p-6 shadow-md bg-white">
        <CardContent>
          <h2 className="text-3xl font-bold mb-4">Convert Units</h2>
  
          {/* Category Selector with sub-groups */}
          <Select onValueChange={handleCategoryChange} value={category}>
            <optgroup label="Basic Converters">
              {basicCategories.map((cat) => (
                <SelectItem key={cat} value={cat}>
                  {cat}
                </SelectItem>
              ))}
            </optgroup>
            <optgroup label="Advanced Converters">
              {advancedCategories.map((cat) => (
                <SelectItem key={cat} value={cat}>
                  {cat}
                </SelectItem>
              ))}
            </optgroup>
          </Select>
  
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
            <Input
              type="text"
              placeholder="Enter value"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              className="border p-2 rounded"
            />
            <Select onValueChange={setFromUnit} value={fromUnit}>
              {unitGroups[category].units.map((unit) => (
                <SelectItem key={unit} value={unit}>
                  {unit}
                </SelectItem>
              ))}
            </Select>
            <Select onValueChange={setToUnit} value={toUnit}>
              {unitGroups[category].units.map((unit) => (
                <SelectItem key={unit} value={unit}>
                  {unit}
                </SelectItem>
              ))}
            </Select>
          </div>
  
          <button
            className="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            onClick={handleConvert}
          >
            Convert
          </button>
  
          {result && (
            <div className="mt-4 text-xl font-semibold">
              Result: {result}
            </div>
          )}
        </CardContent>
      </Card>
    );
  }
